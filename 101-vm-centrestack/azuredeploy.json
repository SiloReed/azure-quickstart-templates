{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "https://raw.githubusercontent.com/SiloReed/azure-quickstart-templates/centrestack-branch/101-vm-centrestack/"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    },
    "buildNumber": {
      "defaultValue": "6033",
      "type": "string",
      "minLength": 4,
      "metadata": {
        "description": "The CentreStack build number to download and install."
      }
    },
    "modules": {
      "type": "array",
      "metadata": {
        "description": "Enter the Module(s) to install including the Version"
      },
      "defaultValue": [
        {
          "name": "AzureRM.Compute",
          "version": "5.8.0"
        },
        {
          "name": "AzureRM.Profile",
          "version": "5.8.0"
        },
        {
          "name": "AzureRM.KeyVault",
          "version": "5.2.1"
        },
        {
          "name": "AzureAD",
          "version": "2.0.2.4"
        }
      ]
    },
    "adminVMUsername": {
      "defaultValue": "csadmin",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Username for the CentreStack Virtual Machine."
      }
    },
    "adminVMPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the CentreStack Virtual Machine."
      }
    },
    "adminDBUsername": {
      "defaultValue": "dbadmin",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Username for the Azure SQL Server."
      }
    },
    "adminDBPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Azure SQL Server."
      }
    },
    "storageAccountsDiagName": {
      "defaultValue": "sacsdiag",
      "type": "string",
      "metadata": {
        "description": "The base name of the storage account for diagnostics. The actual name will be a lower case unique string."
      }
    },
    "storageAccountsDisksName": {
      "defaultValue": "sacsdisk",
      "type": "string",
      "metadata": {
        "description": "The base name of the storage account for boot disks. The actual name will be a lower case unique string."
      }
    },
    "storageAccountsBlobName": {
      "defaultValue": "sacsblob",
      "type": "string",
      "metadata": {
        "description": "The base name of the storage account for the back end storage blob container. The actual name will be a lower case unique string."
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "CENTRESTACK",
      "metadata": {
        "description": "Specifiy the name of VM."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Specifiy the size of VM required for the VM(s)"
      },
      "defaultValue": "Standard_D2s_v3",
      "allowedValues": [
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D2s_v3",
        "Standard_D4s_v3"
      ]
    },
    "dnsNameForPublicIP": {
      "defaultValue": "centrestack",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Globally unique DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
      }
    },
    "databaseHost": {
      "type": "string",
      "defaultValue": "Local",
      "allowedValues": [
        "Local",
        "Azure_SQL",
        "Azure_MySQL",
        "None"
      ]
    },
    "serverNameSQL": {
      "defaultValue": "csazuresql",
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Specifiy the name of Azure SQL Server."
      }
    },
    "skuName": {
      "defaultValue": "S0",
      "type": "string",
      "metadata": {
        "description": "Specifiy the name of the SQL database Database Transaction Units (DTUs)."
      },
      "allowedValues": [
        "S0",
        "S1",
        "S2",
        "S3",
        "S4",
        "S5",
        "S6",
        "S7",
        "S8",
        "S9",
        "S10",
        "S11",
        "S12"
      ]
    }
  },
  "variables": {
    "nicName": "nic-CentreStack",
    "vnetName": "vnet-CentreStack",
    "pipName": "pip-CentreStack",
    "kvName": "kv-CentreStack",
    "nsgName": "nsg-CentreStack",
    "asgName": "asg-CentreStack",
    "subnetName": "sn-CentreStack",
    "publicIPAddressType": "Static",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "asgId": "[resourceId('Microsoft.Network/applicationSecurityGroups', variables('asgName'))]",
    "nsgRuleNames": {
      "rdp": "AllowRDPToCentreStack",
      "http": "AllowHTTPToCentreStack",
      "https": "AllowHTTPSToCentreStack"
    },
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "saDisksName": "[toLower(concat(parameters('storageAccountsDisksName'), uniqueString(resourceGroup().id)))]",
    "saDiagName": "[toLower(concat(parameters('storageAccountsDiagName'), uniqueString(resourceGroup().id)))]",
    "saBlobName": "[toLower(concat(parameters('storageAccountsBlobName'), uniqueString(resourceGroup().id)))]",
    "containerName": "centrestackbes",
    "saType": "[if(contains(parameters('vmSize'), 's_v3'), 'Premium_LRS', 'Standard_LRS')]",
    "saTier": "[if(contains(parameters('vmSize'), 's_v3'), 'Premium', 'Standard')]",
    "powerShell": {
      "script": "Install-CentreStack.ps1",
      "folder": "scripts",
      "parameters": "[concat('-Verbose', ' -Build ', parameters('buildNumber'), ' -VaultName ', variables('kvName'), ' -Modules ', variables('modules'))]",
      "scriptMySQL": "Install-MySQL.ps1",
      "scriptCommonFunctions": "Common-Functions.ps1"
    },
    "customScriptExtName": "Install-CentreStack",
    "databaseName": "csmain",
    "collation": "SQL_Latin1_General_CP1_CI_AS",
    "maxSizeBytes": 268435456000,
    "sampleName": "",
    "zoneRedundant": false,
    "licenseType": "",
    "tier": "Standard",
    "allowAzureIps": true,
    "sqlServerName": "[toLower(concat(parameters('serverNameSQL'), uniqueString(resourceGroup().id)))]",
    "enableATP": false,
    "readerRole": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
    "roleAssignmentName": "[guid(resourceGroup().id)]",
    "singleQuote": "'",
    "modules": "[replace(replace(replace(replace(replace(string(parameters('modules')), '[{\"', '@(@{'), '\":\"', concat(' = ', variables('singleQuote'))), '\",\"', concat(variables('singleQuote'), '; ')), '\"},{\"', concat(variables('singleQuote'), '}, @{')), '\"}]', concat(variables('singleQuote'), '})'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/applicationSecurityGroups",
      "name": "[variables('asgName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "provisioningState": "Succeeded"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
              },
              "primary": true,
              "privateIPAddressVersion": "IPv4",
              "applicationSecurityGroups": [
                {
                  "id": "[variables('asgID')]"
                }
              ]
            }
          }
        ],
        "dnsSettings": {
          "dnsServers": [],
          "appliedDnsServers": [],
          "internalDomainNameSuffix": "exrugufeylrupjg1z2t4kpp1ne.bx.internal.cloudapp.net"
        },
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        },
        "primary": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]",
        "[variables('asgID')]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "nsg-CentreStack",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "securityRules": [
          {
            "name": "[variables('nsgRuleNames').https]",
            "properties": {
              "description": "Allow HTTPS to CentreStack Application SecurityGroup",
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": [],
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('asgId')]"
                }
              ],
              "destinationAddressPrefix": ""
            }
          },
          {
            "name": "[variables('nsgRuleNames').http]",
            "properties": {
              "description": "Allows HTTP to CentreStack Application Security Group",
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": [],
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('asgId')]"
                }
              ],
              "destinationAddressPrefix": ""
            }
          },
          {
            "name": "[variables('nsgRuleNames').rdp]",
            "properties": {
              "description": "Allows RDP to CentreStack Application Security Group",
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": [],
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('asgId')]"
                }
              ],
              "destinationAddressPrefix": ""
            }
          }
        ],
        "defaultSecurityRules": [
          {
            "name": "AllowVnetInBound",
            "properties": {
              "description": "Allow inbound traffic from all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAzureLoadBalancerInBound",
            "properties": {
              "description": "Allow inbound traffic from azure load balancer",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 65001,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "description": "Deny all inbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowVnetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowInternetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 65001,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllOutBound",
            "properties": {
              "description": "Deny all outbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ]
      },
      "dependsOn": [
        "[variables('asgID')]"
      ]
    },
    {
      "comments": "pip-CentreStack'.",
      "type": "Microsoft.Network/publicIPAddresses",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "name": "[variables('pipName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
        },
        "ipTags": []
      },
      "dependsOn": []
    },
    {
      "comments": "vnet-CentreStack",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              },
              "serviceEndpoints": []
            }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "nsg rule AllowHTTPSToCentreStack",
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "name": "[concat(variables('nsgName'), '/', variables('nsgRuleNames').https)]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-02-01",
      "scale": null,
      "properties": {
        "description": "Allow HTTPS to CentreStack Application SecurityGroup",
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "443",
        "sourceAddressPrefix": "*",
        "access": "Allow",
        "priority": 110,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": [],
        "destinationApplicationSecurityGroups": [
          {
            "id": "[variables('asgId')]"
          }
        ],
        "destinationAddressPrefix": ""
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "nsg rule AllowHTTPToCentreStack",
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "name": "[concat(variables('nsgName'), '/', variables('nsgRuleNames').http)]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-02-01",
      "scale": null,
      "properties": {
        "description": "Allows HTTP to CentreStack Application Security Group",
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "80",
        "sourceAddressPrefix": "*",
        "access": "Allow",
        "priority": 100,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": [],
        "destinationApplicationSecurityGroups": [
          {
            "id": "[variables('asgId')]"
          }
        ],
        "destinationAddressPrefix": ""
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "nsg rule AllowRDPToCentreStack",
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('nsgName'), '/', variables('nsgRuleNames').rdp)]",
      "apiVersion": "2018-02-01",
      "scale": null,
      "properties": {
        "description": "Allows RDP to CentreStack Application Security Group",
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "3389",
        "sourceAddressPrefix": "*",
        "access": "Allow",
        "priority": 120,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": [],
        "destinationApplicationSecurityGroups": [
          {
            "id": "[variables('asgId')]"
          }
        ],
        "destinationAddressPrefix": ""
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "subnet sn-Public",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('vnetName'), '/', variables('subnetName'))]",
      "apiVersion": "2018-02-01",
      "scale": null,
      "properties": {
        "addressPrefix": "[variables('subnetPrefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        },
        "serviceEndpoints": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "apiVersion": "2018-06-01",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {},
      "scale": null,
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "osType": "Windows",
            "name": "[parameters('vmName')]",
            "createOption": "FromImage",
            "vhd": {
              "uri": "[concat('https', '://', variables('saDisksName'), '.blob.core.windows.net', concat('/vhds/', parameters('vmName'), uniqueString(resourceGroup().id), '.vhd'))]"
            },
            "caching": "ReadWrite",
            "diskSizeGB": 127
          },
          "dataDisks": []
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminVMUsername')]",
          "adminPassword": "[parameters('adminVMPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true
          },
          "secrets": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https', '://', variables('saDiagName'), '.blob.core.windows.net', '/')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDisksName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagName'))]"
      ]
    },
    {
      "comments": "storageAccounts sadisk",
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "[variables('saType')]",
        "tier": "[variables('saTier')]"
      },
      "kind": "StorageV2",
      "name": "[variables('saDisksName')]",
      "apiVersion": "2018-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "dependsOn": []
    },
    {
      "comments": "storageAccounts sacsdiag",
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('saDiagName')]",
      "apiVersion": "2018-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "dependsOn": []
    },
    {
      "comments": "storageAccounts sacsblob",
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('saBlobName')]",
      "apiVersion": "2018-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "resources": [
        {
          "name": "[concat('default/', variables('containerName'))]",
          "type": "blobServices/containers",
          "apiVersion": "2018-03-01-preview",
          "dependsOn": [
            "[variables('saBlobName')]"
          ]
        }
      ],
      "dependsOn": []
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'), '/', variables('customScriptExtName'))]",
      "apiVersion": "2018-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('_artifactsLocation'), '/', variables('powerShell').folder, '/', variables('powerShell').script, parameters('_artifactsLocationSasToken'))]",
            "[concat(parameters('_artifactsLocation'), '/', variables('powerShell').folder, '/', variables('powerShell').scriptMySQL, parameters('_artifactsLocationSasToken'))]",
            "[concat(parameters('_artifactsLocation'), '/', variables('powerShell').folder, '/', variables('powerShell').scriptCommonFunctions, parameters('_artifactsLocationSasToken'))]"
          ]
        },
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.9",
        "protectedSettings": {
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command \"& {', './', variables('powerShell').script, ' ', variables('powerShell').parameters, '}\"')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ]
    },
    {
      "condition": "[equals(parameters('databaseHost'),'Azure_SQL')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('sqlServerName')]",
      "properties": {
        "administratorLogin": "[parameters('adminDBUsername')]",
        "administratorLoginPassword": "[parameters('adminDBPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "condition": "[equals(parameters('databaseHost'),'Azure_SQL')]",
          "apiVersion": "2017-10-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "[variables('databaseName')]",
          "properties": {
            "collation": "[variables('collation')]",
            "maxSizeBytes": "[variables('maxSizeBytes')]",
            "sampleName": "[variables('sampleName')]",
            "zoneRedundant": "[variables('zoneRedundant')]",
            "licenseType": "[variables('licenseType')]"
          },
          "sku": {
            "name": "[parameters('skuName')]",
            "tier": "[variables('tier')]"
          },
          "type": "databases"
        },
        {
          "condition": "[and(variables('allowAzureIps'), equals(parameters('databaseHost'),'Azure_SQL'))]",
          "apiVersion": "2014-04-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ],
          "location": "[resourceGroup().location]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "[reference(concat('Microsoft.Network/networkInterfaces/', variables('nicName'))).ipConfigurations[0].properties.privateIPAddress]",
            "startIpAddress": "[reference(concat('Microsoft.Network/networkInterfaces/', variables('nicName'))).ipConfigurations[0].properties.privateIPAddress]"
          },
          "type": "firewallrules"
        },
        {
          "condition": "[variables('enableATP')]",
          "apiVersion": "2017-03-01-preview",
          "type": "securityAlertPolicies",
          "name": "Default",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]",
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'), '/databases/', variables('databaseName'))]"
          ],
          "properties": {
            "state": "Enabled",
            "disabledAlerts": [],
            "emailAddresses": [],
            "emailAccountAdmins": true
          }
        }
      ],
      "type": "Microsoft.Sql/servers",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
      ]
    },
    {
      "apiVersion": "2017-09-01",
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[variables('roleAssignmentName')]",
      "properties": {
        "roleDefinitionId": "[variables('readerRole')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', parameters('vmName')), '2017-12-01', 'Full').identity.principalId]",
        "scope": "[resourceGroup().id]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/2f2811f7-deca-4eb2-9c8e-4129e62bb915/resourceGroups/rg-deploy1/providers/Microsoft.KeyVault/vaults/kv-centrestack'.",
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('kvName')]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', parameters('vmName')), '2017-12-01', 'Full').identity.principalId]",
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "certificates": []
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false
      },
      "dependsOn": [
        "[concat('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('kvName'), '/adminVMUsername')]",
      "apiVersion": "2016-10-01",
      "properties": {
        "value": "[parameters('adminVMUsername')]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('kvName'), '/adminVMPassword')]",
      "apiVersion": "2016-10-01",
      "properties": {
        "value": "[parameters('adminVMPassword')]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('kvName'), '/adminDBUsername')]",
      "apiVersion": "2016-10-01",
      "properties": {
        "value": "[parameters('adminDBUsername')]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('kvName'), '/adminDBPassword')]",
      "apiVersion": "2016-10-01",
      "properties": {
        "value": "[parameters('adminDBPassword')]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('kvName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('kvName'), '/databaseHost')]",
      "apiVersion": "2016-10-01",
      "properties": {
        "value": "[parameters('databaseHost')]"
      },
      "dependsOn": [
        "[concat('Microsoft.KeyVault/vaults/', variables('kvName'))]"
      ]
    }
  ],
  "outputs": {
    "Modules": {
      "type": "string",
      "value": "[variables('modules')]"
    },
    "fqdn": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))).dnsSettings.fqdn]"
    },
    "ipaddress": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))).ipAddress]"
    },
    "privateipaddress": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/networkInterfaces/', variables('nicName'))).ipConfigurations[0].properties.privateIPAddress]"
    },
    "database": {
      "type": "string",
      "value": "[if(equals(parameters('databaseHost'), 'Azure_SQL'), concat('Microsoft.Sql/servers/', variables('sqlServerName'), '/databases/', variables('databaseName')), 'all-in-one')]"
    }
  }
}