{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "https://raw.githubusercontent.com/SiloReed/azure-quickstart-templates/centrestack-branch/101-vm-centrestack/"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    },
    "adminUsername": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "adminSQLUsername": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Username for the Azure SQL Server."
      }
    },
    "adminSQLPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Azure SQL Server."
      }
    },
    "storageAccounts_diag_name": {
      "defaultValue": "sacsdiag",
      "type": "string",
      "metadata": {
        "description": "Name of the storage account for diagnostics"
      }
    },
    "storageAccounts_disks_name": {
      "defaultValue": "sacsdisks",
      "type": "string",
      "metadata": {
        "description": "Name of the storage account for boot disks"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Specifiy the name of VM."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Specifiy the size of VM required for the VM(s)"
      },
      "defaultValue": "Standard_A4_v2",
      "allowedValues": [
        "Standard_A2_v2",
        "Standard_A4_v2",
        "Standard_D2_v3",
        "Standard_D4_v3",
        "Standard_D2s_v3",
        "Standard_D4s_v3"
      ]
    },
    "dnsNameForPublicIP": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Globally unique DNS Name for the Public IP used to access the Virtual Machine."
      }
    },
    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2012-R2-Datacenter",
        "2016-Datacenter"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
      }
    },
    "serverNameSQL": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Specifiy the name of Azure SQL Server."
      }
    }
  },
  "variables": {
    "nicName": "nic-CentreStack",
    "vnetName": "vnet-CentreStack",
    "pipName": "pip-CentreStack",
    "nsgName": "nsg-CentreStack",
    "asgName": "asg-CentreStack",
    "subnetName": "sn-CentreStack",
    "publicIPAddressType": "Static",
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "saDisksName": "[toLower(concat(parameters('storageAccounts_disks_name'), uniqueString(resourceGroup().id)))]",
    "saDiagName": "[toLower(concat(parameters('storageAccounts_diag_name'), uniqueString(resourceGroup().id)))]",
    "asgId": "[resourceId('Microsoft.Network/applicationSecurityGroups',variables('asgName'))]",
    "powerShell": {
      "script": "Install-CentreStack.ps1",
      "folder": "scripts",
      "parameters": "[concat('-Verbose')]"
    },
    "nsgRuleNames": {
      "rdp": "AllowRDPToCentreStack",
      "http": "AllowHTTPToCentreStack",
      "https": "AllowHTTPSToCentreStack"
    },
    "customScriptExtName": "Install-CentreStack",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "sqlServerName": "[toLower(concat(parameters('serverNameSQL'), uniqueString(resourceGroup().id)))]",
    "databaseName": "csmain",
    "collation": "SQL_Latin1_General_CP1_CI_AS",
    "maxSizeBytes": 268435456000,
    "sampleName": "",
    "zoneRedundant": false,
    "licenseType": "",
    "skuName": "S0",
    "tier": "Standard",
    "allowAzureIps": true,
    "enableATP": false
  },
  "resources": [
    {
      "comments": "Generalized from resource: '/subscriptions/2f2811f7-deca-4eb2-9c8e-4129e62bb915/resourceGroups/rg-CentreStack/providers/Microsoft.Compute/virtualMachines/CENTRESTACK'.",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "apiVersion": "2018-06-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2s_v3"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "osType": "Windows",
            "name": "[parameters('vmName')]",
            "createOption": "FromImage",
            "vhd": {
              "uri": "[concat('https', '://', variables('saDisksName'), '.blob.core.windows.net', concat('/vhds/', parameters('vmName'),'20181019130652.vhd'))]"
            },
            "caching": "ReadWrite",
            "diskSizeGB": 127
          },
          "dataDisks": []
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true
          },
          "secrets": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https', '://', variables('saDiagName'), '.blob.core.windows.net', '/')]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDisksName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('saDiagName'))]"
      ]
    },
    {
      "comments": "asg-CentreStack",
      "type": "Microsoft.Network/applicationSecurityGroups",
      "name": "[variables('asgName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "provisioningState": "Succeeded"
      },
      "dependsOn": []
    },
    {
      "comments": "nic-CentreStack",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
              },
              "primary": true,
              "privateIPAddressVersion": "IPv4",
              "applicationSecurityGroups": [
                {
                  "id": "[resourceId('Microsoft.Network/applicationSecurityGroups', variables('asgName'))]"
                }
              ]
            }
          }
        ],
        "dnsSettings": {
          "dnsServers": [],
          "appliedDnsServers": [],
          "internalDomainNameSuffix": "exrugufeylrupjg1z2t4kpp1ne.bx.internal.cloudapp.net"
        },
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        },
        "primary": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]",
        "[resourceId('Microsoft.Network/applicationSecurityGroups', variables('asgName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "nsg-CentreStack",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "securityRules": [
          {
            "name": "[variables('nsgRuleNames').https]",
            "properties": {
              "description": "Allow HTTPS to CentreStack Application SecurityGroup",
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": [],
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('asgId')]"
                }
              ],
              "destinationAddressPrefix": ""
            }
          },
          {
            "name": "[variables('nsgRuleNames').http]",
            "properties": {
              "description": "Allows HTTP to CentreStack Application Security Group",
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": [],
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('asgId')]"
                }
              ],
              "destinationAddressPrefix": ""
            }
          },
          {
            "name": "[variables('nsgRuleNames').rdp]",
            "properties": {
              "description": "Allows RDP to CentreStack Application Security Group",
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": [],
              "destinationApplicationSecurityGroups": [
                {
                  "id": "[variables('asgId')]"
                }
              ],
              "destinationAddressPrefix": ""
            }
          }
        ],
        "defaultSecurityRules": [
          {
            "name": "AllowVnetInBound",
            "properties": {
              "description": "Allow inbound traffic from all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAzureLoadBalancerInBound",
            "properties": {
              "description": "Allow inbound traffic from azure load balancer",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 65001,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "description": "Deny all inbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowVnetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowInternetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 65001,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllOutBound",
            "properties": {
              "description": "Deny all outbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Outbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/applicationSecurityGroups', variables('asgName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/2f2811f7-deca-4eb2-9c8e-4129e62bb915/resourceGroups/rg-CentreStack/providers/Microsoft.Network/publicIPAddresses/pip-CentreStack'.",
      "type": "Microsoft.Network/publicIPAddresses",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "name": "[variables('pipName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
        },
        "ipTags": []
      },
      "dependsOn": []
    },
    {
      "comments": "vnet-CentreStack",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              },
              "serviceEndpoints": []
            }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "storageAccounts sacsdisks'.",
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Premium_LRS",
        "tier": "Premium"
      },
      "kind": "StorageV2",
      "name": "[variables('saDisksName')]",
      "apiVersion": "2018-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "dependsOn": []
    },
    {
      "comments": "Generalized from resource: '/subscriptions/2f2811f7-deca-4eb2-9c8e-4129e62bb915/resourceGroups/rg-CentreStack/providers/Microsoft.Storage/storageAccounts/sacsdiag'.",
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('saDiagName')]",
      "apiVersion": "2018-07-01",
      "location": "[resourceGroup().location]",
      "tags": {},
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": false,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'), '/', variables('customScriptExtName'))]",
      "apiVersion": "2018-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "[concat(parameters('_artifactsLocation'), '/', variables('powerShell').folder, '/', variables('powerShell').script, parameters('_artifactsLocationSasToken'))]"
          ]
        },
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.9",
        "protectedSettings": {
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -Command \"& {', './', variables('powerShell').script, ' ', variables('powerShell').parameters, '}\"')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ]
    },
    {
      "comments": "nsg rule AllowHTTPSToCentreStack",
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "name": "[concat(variables('nsgName'), '/', variables('nsgRuleNames').https)]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-02-01",
      "scale": null,
      "properties": {
        "description": "Allow HTTPS to CentreStack Application SecurityGroup",
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "443",
        "sourceAddressPrefix": "*",
        "access": "Allow",
        "priority": 110,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": [],
        "destinationApplicationSecurityGroups": [
          {
            "id": "[variables('asgId')]"
          }
        ],
        "destinationAddressPrefix": ""
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "nsg rule AllowHTTPToCentreStack",
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "name": "[concat(variables('nsgName'), '/', variables('nsgRuleNames').http)]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-02-01",
      "scale": null,
      "properties": {
        "description": "Allows HTTP to CentreStack Application Security Group",
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "80",
        "sourceAddressPrefix": "*",
        "access": "Allow",
        "priority": 100,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": [],
        "destinationApplicationSecurityGroups": [
          {
            "id": "[variables('asgId')]"
          }
        ],
        "destinationAddressPrefix": ""
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "nsg rule AllowRDPToCentreStack",
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('nsgName'), '/', variables('nsgRuleNames').rdp)]",
      "apiVersion": "2018-02-01",
      "scale": null,
      "properties": {
        "description": "Allows RDP to CentreStack Application Security Group",
        "protocol": "TCP",
        "sourcePortRange": "*",
        "destinationPortRange": "3389",
        "sourceAddressPrefix": "*",
        "access": "Allow",
        "priority": 120,
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes": [],
        "destinationAddressPrefixes": [],
        "destinationApplicationSecurityGroups": [
          {
            "id": "[variables('asgId')]"
          }
        ],
        "destinationAddressPrefix": ""
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "comments": "subnet sn-Public.",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('vnetName'), '/', variables('subnetName'))]",
      "apiVersion": "2018-02-01",
      "scale": null,
      "properties": {
        "addressPrefix": "[variables('subnetPrefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        },
        "serviceEndpoints": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('sqlServerName')]",
      "properties": {
          "administratorLogin": "[parameters('adminSQLUsername')]",
          "administratorLoginPassword": "[parameters('adminSQLPassword')]",
          "version": "12.0"
      },
      "resources": [
          {
              "apiVersion": "2017-10-01-preview",
              "dependsOn": [
                  "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
              ],
              "location": "[resourceGroup().location]",
              "name": "[variables('databaseName')]",
              "properties": {
                  "collation": "[variables('collation')]",
                  "maxSizeBytes": "[variables('maxSizeBytes')]",
                  "sampleName": "[variables('sampleName')]",
                  "zoneRedundant": "[variables('zoneRedundant')]",
                  "licenseType": "[variables('licenseType')]"
              },
              "sku": {
                  "name": "[variables('skuName')]",
                  "tier": "[variables('tier')]"
              },
              "type": "databases"
          },
          {
              "condition": "[variables('allowAzureIps')]",
              "apiVersion": "2014-04-01-preview",
              "dependsOn": [
                  "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
              ],
              "location": "[resourceGroup().location]",
              "name": "AllowAllWindowsAzureIps",
              "properties": {
                  "endIpAddress": "0.0.0.0",
                  "startIpAddress": "0.0.0.0"
              },
              "type": "firewallrules"
          },
          {
              "condition": "[variables('enableATP')]",
              "apiVersion": "2017-03-01-preview",
              "type": "securityAlertPolicies",
              "name": "Default",
              "dependsOn": [
                  "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]",
                  "[concat('Microsoft.Sql/servers/', variables('sqlServerName'), '/databases/', variables('databaseName'))]"
              ],
              "properties": {
                  "state": "Enabled",
                  "disabledAlerts": [],
                  "emailAddresses": [],
                  "emailAccountAdmins": true
              }
          }
      ],
      "type": "Microsoft.Sql/servers",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
      ]
  }    
  ],
  "outputs": {
    "fqdn": {
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))).dnsSettings.fqdn]",
      "type": "string"
    },
    "ipaddress": {
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))).ipAddress]",
      "type": "string"
    }
  }
}